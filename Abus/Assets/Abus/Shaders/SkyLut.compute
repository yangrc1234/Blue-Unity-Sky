#define TRANSMITTANCE_READABLE 1
#define MULTIPLE_SCATTERING_READABLE 1

#include "LutCommon.cginc"

#define NUM_SAMPLE_STEPS 16

#define HIGHER_SAMPLE_AT_BOUNDARY_LAYER 1

void IntegrateStep(float3 ViewDir, float3 SamplePos, const float StepSize, inout float4 LuminanceIntegral, inout float4 TransmittanceToOrigin)
{
    const float SampleHeight = length(SamplePos);
    float4 RayleighExt, RayleighScat;
    RayleighExt = RayleighScat = SampleRayleigh(SampleHeight);
    const float CosSunZenith = dot(normalize(SamplePos), AtmosphereLightDirection);

    const float4 TransmittanceToSun = RayIntersectsGround(SampleHeight, CosSunZenith) ? 0.0f : GetTransmittance(SampleHeight, CosSunZenith);

    float4 MultipleScattering = GetMultipleScattering(SampleHeight, CosSunZenith);
    float4 ScatteringForMS = RayleighScat;
    float4 MieLuminance = 0.0f;
    float4 MieExtinctionCoefficient = 0.0f;
    const float VoL = min(dot(ViewDir, AtmosphereLightDirection), CosSunDiscHalfAngle);
    IntegrateMieParticles(SampleHeight, ScatteringForMS, MieExtinctionCoefficient, MieLuminance, VoL);

    float4 OZoneAbsorption = SampleOZoneAbsorptionCoefficients(SampleHeight);

    float4 ToIntegrate;
    ToIntegrate = /*UnitIlluminance **/ TransmittanceToSun * (
            RayleighScat * RayleighPhaseAlt(dot(ViewDir, AtmosphereLightDirection)) +
            MieLuminance)
        + MultipleScattering * ScatteringForMS * IsotropicPhase();

    float4 SampleTransmittance = exp(-StepSize * (RayleighExt + MieExtinctionCoefficient));
    LuminanceIntegral += TransmittanceToOrigin * IntegrateWithTransmittance(
        RayleighExt + MieExtinctionCoefficient + OZoneAbsorption,
        SampleTransmittance,
        ToIntegrate
    );

    TransmittanceToOrigin *= SampleTransmittance;
}

// For a scale height distribution, given view height and view direction, calculate scale height integral until atmosphere upper bound.
float4 Integrate(float OriginHeight, float3 ViewDir)
{
    const float mu = dot(ViewDir, float3(0.0, 1.0, 0.0));
    
    float IntegrateDistance;
    const bool bGroundIntersected = ResolveRaymarchPath(OriginHeight, mu, IntegrateDistance);

    const float StepSize = IntegrateDistance / NUM_SAMPLE_STEPS;
    
    float4 LuminanceIntegral = 0.0f;

    float4 TransmittanceToOrigin = 1.0f;

    const float3 Step = IntegrateDistance * ViewDir / NUM_SAMPLE_STEPS;
    
    for (int iStep = 0; iStep < NUM_SAMPLE_STEPS; iStep++)
    {
        const float3 SampleStart = float3(0.0f, OriginHeight, 0.0f) + (iStep) * Step; 
        const float3 SamplePos = float3(0.0f, OriginHeight, 0.0f) + (iStep + 0.5f) * Step;
        const float3 SampleEnd = float3(0.0f, OriginHeight, 0.0f) + (iStep + 1.0f) * Step;

        // Take more samples when crossing the boundary layer.
        bool bCrossingPlanetBoundaryLayer = (abs((length(SamplePos) - GroundHeight) - PlanetBoundaryLayerAltitude) < PLANET_BOUNDARY_LAYER_FADE_HEIGHT * 3.0f) || (length(SampleStart) - GroundHeight > PlanetBoundaryLayerAltitude) != (length(SampleEnd) - GroundHeight > PlanetBoundaryLayerAltitude); 

        if (bCrossingPlanetBoundaryLayer)
        {
            const int SubStepNum = 8;
            for (int iSubstep = 0; iSubstep < SubStepNum; iSubstep++)
            {
                const float3 SamplePos1 = float3(0.0f, OriginHeight, 0.0f) + (iStep + (iSubstep + 0.5f) / SubStepNum) * Step;
                IntegrateStep(ViewDir, SamplePos1, StepSize * (1.0f / SubStepNum), LuminanceIntegral, TransmittanceToOrigin);
            }
        }
        else
        {
            IntegrateStep(ViewDir, SamplePos, StepSize, LuminanceIntegral, TransmittanceToOrigin);
        }
    }

    return LuminanceIntegral;
}

RWTexture2D<float4> OutSpectrumSkyColor;
RWTexture2D<float4> OutSrgbSkyColor;

#pragma kernel MainCS
[numthreads(8,8,1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    float3 ViewDir = GetSkyViewTextureUvToViewDir(CaptureHeight, (0.5f + id.xy) * SkyViewTextureSizeAndInvSize.zw);
    OutSrgbSkyColor[id.xy] += float4(ColorConvertToSRGB(dWaveLength * CurrentIteratingSunIrradiance * Integrate(CaptureHeight, ViewDir)), 0.0f);
}