#define TRANSMITTANCE_READABLE 1
#define MULTIPLE_SCATTERING_READABLE 1

#include "LutCommon.cginc"

#define NUM_SAMPLE_STEPS 16

#define HIGHER_SAMPLE_AT_BOUNDARY_LAYER 1

void IntegrateStep(float3 ViewDir, float3 SamplePos, const float StepSize, inout float4 LuminanceIntegral, inout float4 TransmittanceToOrigin)
{
    float4 Scattering;
    float4 Extinction;
    SampleScatteringAtPosition(ViewDir, SamplePos, 1.0f, Extinction, Scattering);

    float4 SampleTransmittance = exp(-StepSize * Extinction);
    LuminanceIntegral += TransmittanceToOrigin * IntegrateWithTransmittance(
        Extinction,
        SampleTransmittance,
        Scattering
    );

    TransmittanceToOrigin *= SampleTransmittance;
}

// For a scale height distribution, given view height and view direction, calculate scale height integral until atmosphere upper bound.
float4 Integrate(float OriginHeight, float3 ViewDir)
{
    const float mu = dot(ViewDir, float3(0.0, 1.0, 0.0));
    
    float TopCloudd1, TopCloudd2;
    const bool bCrossTopCloud = RayIntersectsLayerAtHeight(OriginHeight, mu, TopCloudAltitude + GroundHeight, TopCloudd1, TopCloudd2);
    
    float IntegrateDistance;
    const bool bGroundIntersected = ResolveRaymarchPath(OriginHeight, mu, IntegrateDistance);

    const float StepSize = IntegrateDistance / NUM_SAMPLE_STEPS;
    
    float4 LuminanceIntegral = 0.0f;

    float4 TransmittanceToOrigin = 1.0f;

    const float3 Step = IntegrateDistance * ViewDir / NUM_SAMPLE_STEPS;
    
    for (int iStep = 0; iStep < NUM_SAMPLE_STEPS; iStep++)
    {
        const float3 SampleStart = float3(0.0f, OriginHeight, 0.0f) + (iStep) * Step; 
        const float3 SamplePos = float3(0.0f, OriginHeight, 0.0f) + (iStep + 0.5f) * Step;
        const float3 SampleEnd = float3(0.0f, OriginHeight, 0.0f) + (iStep + 1.0f) * Step;

        const float DistanceStart = iStep * StepSize;
        const float DistanceEnd = (iStep + 1) * StepSize;

        // Take more samples when crossing the boundary layer.
        bool bCrossingPlanetBoundaryLayer = (abs((length(SamplePos) - GroundHeight) - PlanetBoundaryLayerAltitude) < PLANET_BOUNDARY_LAYER_FADE_HEIGHT * 3.0f) || (length(SampleStart) - GroundHeight > PlanetBoundaryLayerAltitude) != (length(SampleEnd) - GroundHeight > PlanetBoundaryLayerAltitude); 

        if (bCrossingPlanetBoundaryLayer && HIGHER_SAMPLE_AT_BOUNDARY_LAYER)
        {
            const int SubStepNum = 8;
            for (int iSubstep = 0; iSubstep < SubStepNum; iSubstep++)
            {
                const float3 SamplePos1 = float3(0.0f, OriginHeight, 0.0f) + (iStep + (iSubstep + 0.5f) / SubStepNum) * Step;
                IntegrateStep(ViewDir, SamplePos1, StepSize * (1.0f / SubStepNum), LuminanceIntegral, TransmittanceToOrigin);
            }
        }
        else
        {
            IntegrateStep(ViewDir, SamplePos, StepSize, LuminanceIntegral, TransmittanceToOrigin);
        }

        if (CloudExtinctionCoefficient > 0.0f)
        {
            int CloudTraceCount = 0;
            if (DistanceStart < TopCloudd1 && DistanceEnd > TopCloudd1)
                CloudTraceCount++;
            if (DistanceStart < TopCloudd2 && DistanceEnd > TopCloudd2)
                CloudTraceCount++;
            
            if (CloudTraceCount > 0)
            {
                // Extra integration for cloud.
                const float Phase = SimpleMiePhaseFunction(0.6f, dot(ViewDir, AtmosphereLightDirection));
                LuminanceIntegral += IntegrateWithTransmittance(CloudExtinctionCoefficient, exp(-CloudExtinctionCoefficient), CloudExtinctionCoefficient * Phase * GetTransmittance(length(SamplePos), dot(ViewDir, AtmosphereLightDirection)));
                // LuminanceIntegral += CloudExtinctionCoefficient * Phase;
                TransmittanceToOrigin *= exp(-CloudExtinctionCoefficient);
            }
        }
    }

    return LuminanceIntegral;
}

RWTexture2D<float4> OutSpectrumSkyColor;
RWTexture2D<float4> OutSRGBSkyColor;

#pragma kernel MainCS
[numthreads(8,8,1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    float3 ViewDir = GetSkyViewTextureUvToViewDir(CaptureHeight, (0.5f + id.xy) * SkyViewTextureSizeAndInvSize.zw);
    const float4 SpectrumResult = dWaveLength * CurrentIteratingSunIrradiance * Integrate(CaptureHeight, ViewDir);
    OutSRGBSkyColor[id.xy] += float4(mul((float3x4)WavelengthToSRGB, SpectrumResult), 0.0f);
}