#include "LutCommon.cginc"


#define NUM_SAMPLE_STEPS 32

float4 TransmittanceRaymarch(float r, float mu)
{
    float IntegrateDistance = DistanceToTopAtmosphereBoundary(r, mu);

    const float StepSize = IntegrateDistance / NUM_SAMPLE_STEPS;
    float3 ViewDir = float3(0.0f, mu, sqrt(saturate(1.0 - mu * mu)));
    
    const float3 Step = StepSize * ViewDir;
    
    float4 TotalExtinctionCoefficient = 0.0;
        
    for (int iStep = 0; iStep < NUM_SAMPLE_STEPS; ++iStep) {
        const float3 SamplePos = float3(0.0f, r, 0.0f) + (iStep + 0.5f) * Step;
        const float SampleHeight = length(SamplePos);

        // Sample atmosphere at SampleHeight.
        TotalExtinctionCoefficient += SampleRayleigh(SampleHeight);

        float4 Scattering = 0.0f;
		IntegrateMieParticles(SampleHeight, Scattering, TotalExtinctionCoefficient);

        TotalExtinctionCoefficient += SampleOZoneAbsorptionCoefficients(SampleHeight);
    }
    
    return exp(-TotalExtinctionCoefficient * StepSize);
}

RWTexture2D<float4> OutTransmittance;
RWTexture2D<float4> OutSRGBTransmittance;

#pragma kernel MainCS
[numthreads(8,8,1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    float r, mu;
    GetRMuFromTransmittanceTextureUv((0.5f + id.xy) / TransmittanceTextureSizeInvSize.xy, r, mu);
    const float4 Transmittance = TransmittanceRaymarch(r, mu);
    OutTransmittance[id.xy] = Transmittance;
    OutSRGBTransmittance[id.xy] += float4(mul((float3x4)NormalizedWavelengthRGBWeight, Transmittance), 0.0f);
}